     1	boolean isGrid = true, isAxis = true, night = false;
     2	//回転用
     3	float rad = 0, rad2 = 28, rad4 = 0;
     4	int alpha = 70, a = 0;
     5	//観覧車option
     6	//色のバリエーション
     7	color[] colorPallet = {color(230, 0, 18, alpha), color(243, 152, 0, alpha), color(255, 251, 0, alpha), color(143, 195, 31, alpha),
     8	                       color(0, 153, 68, alpha), color(0, 158, 150, alpha), color(0, 160, 233, alpha), color(0, 104, 183, alpha),
     9	                       color(29, 32, 136, alpha), color(146, 7, 131, alpha), color(228, 0, 127, alpha), color(229, 0, 79, alpha)};
    10	final float gondolaSize =  50;      // ゴンドラの半径
    11	final float speed       =   .3;  // 回転速度
    12	final float depth       =   10;      // 奥行きの大きさ
    13	final int   r2   =  40;      // ゴンドラの外側円柱
    14	final int   r1   =  20;      // ゴンドラの内側円柱
    15	float rad3 = 0;     //回転角
    16	
    17	//Image option
    18	PImage imgLeaf, imgTrunk, imgTrainSide, imgTrainFront, imgLogo;
    19	PShape trunk, base;
    20	
    21	void setup(){
    22	    size(800, 800, P3D);
    23	    imgLeaf = loadImage("leaf.jpg");
    24	    imgTrunk = loadImage("trunk.jpg");
    25	    imgTrainSide = loadImage("train01.png");
    26	    imgTrainFront = loadImage("train02.jpg");
    27	    imgLogo = loadImage("mig.jpg");
    28	    noStroke(); 
    29	}
    30	void axis(char s, color c){
    31	    int len = 200;fill(c);
    32	    stroke(c);
    33	    pushMatrix();
    34	    if(isAxis){
    35	        box(len, 1, 1);
    36	        pushMatrix();
    37	        translate(len / 2, 0, 0);
    38	        sphere(3);
    39	        text(s, 5, -5, 0);
    40	        popMatrix();
    41	    }
    42	    
    43	    if(isGrid){
    44	        pushMatrix();
    45	        translate(0, -len / 2, -len / 2);
    46	        int ngrids = 20, xs = len / ngrids, ys = len / ngrids;
    47	        for(int i = 1; i < ngrids; i++){
    48	            line(0, 0, ys * i, 0, len, ys * i); 
    49	            line(0, xs * i, 0, 0, xs * i, len); 
    50	        }
    51	        popMatrix();
    52	    }
    53	    popMatrix();
    54	    noStroke();
    55	} 
    56	    
    57	void drawAxis(char s, color c){
    58	    switch(s){
    59	        case 'X': axis(s, c);break;
    60	        case 'Y': pushMatrix();rotateZ(PI / 2);axis(s, c);popMatrix();break;
    61	        case 'Z': pushMatrix();rotateY(-PI / 2);axis(s, c);popMatrix();break;
    62	        }
    63	    }
    64	    
    65	void keyPressed(){
    66	    switch(key){
    67	        case 'g': if(isGrid) isGrid = false;
    68	        else isGrid = true;break;
    69	        case 'a': if(isAxis) isAxis = false;else isAxis = true;break;
    70	        case 'n': if(night) night = false; else night = true;break;
    71	        case 's': saveFrame("photo" + a + ".png");a++;break;
    72	        }
    73	    }
    74	
    75	 //円柱の作成(長さ,上面の半径,底面の半径)
    76	void pillar(float length, float radius1 , float radius2){
    77	    float x,y,z;
    78	    pushMatrix();
    79	    //底面の作成
    80	    beginShape(TRIANGLE_FAN);
    81	    z = -length / 2;
    82	    vertex(0, 0, z);
    83	    for(int deg = 0; deg <= 360; deg = deg + 10){
    84	        x = cos(radians(deg)) * radius1;
    85	        y = sin(radians(deg)) * radius1;
    86	        vertex(x, y, z);
    87	    }
    88	    endShape();              
    89	    //上面の作成
    90	    beginShape(TRIANGLE_FAN);
    91	    z = length / 2;
    92	    vertex(0, 0, z);
    93	    for(int deg = 0; deg <= 360; deg = deg + 10){
    94	        x = cos(radians(deg)) * radius2;
    95	        y = sin(radians(deg)) * radius2;
    96	        vertex(x, y, z);
    97	    }
    98	    endShape();
    99	    //側面の作成
   100	    beginShape(TRIANGLE_STRIP);
   101	    for(int deg =0; deg <= 360; deg = deg + 5){
   102	        x = cos(radians(deg)) * radius1;
   103	        y = sin(radians(deg)) * radius1;
   104	        z = -length / 2;
   105	        vertex(x, y, z);
   106	        x = cos(radians(deg)) * radius2;
   107	        y = sin(radians(deg)) * radius2;
   108	        z = length / 2;
   109	        vertex(x, y, z);
   110	    }
   111	    endShape();
   112	    popMatrix();
   113	}
   114	
   115	//車の土台
   116	void drawBody(float s, float x, float z, int r, int g, int b, boolean dir){
   117	    pushMatrix();
   118	    fill(r, g, b);
   119	    scale(s);
   120	    translate(x + .05, .2, z);
   121	    rotateY(PI/2);
   122	    if(dir) rotateY(rad*PI/(180*2));
   123	    else rotateY(-rad*PI/180);
   124	    drawBox(1.3, .3, .55, 4);
   125	    //正面部品
   126	    if(dir){
   127	        //目
   128	        pushMatrix();
   129	        if(night) emissive(242, 242, 176);
   130	        fill(255, 0, 0);
   131	        translate(.65, .05, .01*int(55/4));
   132	        rotateY(PI/2);
   133	        box(.01*int(55/4), .05, .05);
   134	        popMatrix();
   135	        //目
   136	        pushMatrix();
   137	        translate(.65, .05, -.01*int(55/4));
   138	        rotateY(PI/2);
   139	        box(.01*int(55/4), .05, .05);
   140	        popMatrix();
   141	        emissive(0);
   142	        //口
   143	        pushMatrix();
   144	        fill(255);
   145	        translate(.66, -.1, 0);
   146	        rotateY(PI/2);
   147	        box(.55, .1, .02);
   148	        popMatrix();
   149	    }
   150	    popMatrix();
   151	    //胴体上
   152	    pushMatrix();
   153	    fill(r, g, b);
   154	    scale(s);
   155	    translate(x, .5, z);
   156	    rotateY(PI/2);
   157	    if (dir) rotateY(rad*PI/(180*2));
   158	    else rotateY(-rad*PI/180);
   159	    drawBox(1., .3, .55, 4);
   160	    popMatrix();
   161	}
   162	
   163	//タイヤの描画
   164	void drawTire(float s, float x, float z, boolean dir){
   165	    //回転の中心
   166	    pushMatrix();
   167	    fill(255, 254, 59);
   168	    scale(s);
   169	    translate(x + .05, .2, z);
   170	    rotateY(PI/2);
   171	    if (dir) rotateY(rad*PI/(180*2));
   172	    else rotateY(-rad*PI/180);
   173	    //後輪
   174	    pushMatrix();
   175	    fill(0);
   176	    translate(-.35, -.05, .25);
   177	    pillar(.1, .15, .15);
   178	    fill(255);
   179	    pillar(.1, .1, .1);
   180	    popMatrix();
   181	    //後輪
   182	    pushMatrix();
   183	    fill(0);
   184	    translate(-.35, -.05, -.25);
   185	    pillar(.1, .15, .15);
   186	    fill(255);
   187	    pillar(.1, .1, .1);
   188	    popMatrix();
   189	    //前輪
   190	    pushMatrix();
   191	    fill(0);
   192	    translate(.25, -.05, .25);
   193	    pillar(.1, .15, .15);
   194	    fill(255);
   195	    pillar(.1, .1, .1);
   196	    popMatrix();
   197	    //前輪
   198	    pushMatrix();
   199	    fill(0);
   200	    translate(.25, -.05, -.25);
   201	    pillar(.1, .15, .15);
   202	    fill(255);
   203	    pillar(.1, .1, .1);
   204	    popMatrix();
   205	
   206	    popMatrix();
   207	}
   208	
   209	//車の描画
   210	void drawCar(float s, float x, float z, int r, int g, int b, boolean dir){
   211	    drawBody(s, x, z, r, g, b, dir);
   212	    drawTire(s, x, z, dir);
   213	}
   214	
   215	//四角錐を描画
   216	void pyramid(int p){
   217	        fill(255);
   218	        beginShape(TRIANGLES);
   219	        if(p == 1){
   220	            //葉の描画
   221	            texture(imgLeaf);
   222	            textureMode(NORMAL);
   223	        }
   224	        vertex(0, .5, 0, .5, 0); vertex(-.5, 0, -.5, 0, 1); vertex(.5, 0, -.5, 1, 0);
   225	        vertex(0, .5, 0, .5, 0); vertex(.5, 0, -.5, 0, 1); vertex(.5, 0, .5, 1, 0);
   226	        vertex(0, .5, 0, .5, 0); vertex(.5, 0, .5, 0, 1); vertex(-.5, 0, .5, 1, 0);
   227	        vertex(0, .5, 0, .5, 0); vertex(-.5, 0, .5, 0, 1); vertex(-.5, 0, -.5, 1, 0);
   228	        vertex(-.5, 0, -.5, .5, 0); vertex(.5, 0, .5, 0, 1); vertex(.5, 0, -.5, 1, 0);
   229	        vertex(-.5, 0, -.5, .5, 0); vertex(-.5, 0, .5, 0, 1); vertex(.5, 0, .5, 1, 0);
   230	        endShape(); 
   231	} 
   232	
   233	//箱を描画
   234	void drawBox(float s, float h, float d, int p){
   235	    beginShape(QUADS);
   236	    //pはどのboxを描画するか
   237	    if(p == 1){
   238	        //幹
   239	        texture(imgTrunk); 
   240	    }
   241	    textureMode(NORMAL);
   242	    //各面(計6面)で描画
   243	    vertex(-s/2, h/2, -d/2, 0, 0);vertex(-s/2, -h/2, -d/2, 0, 1);vertex(s/2, -h/2, -d/2, 1, 1);vertex(s/2, h/2, -d/2, 1, 0);
   244	    vertex(s/2, h/2, -d/2, 0, 0);vertex(s/2, -h/2, -d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, h/2, d/2, 1, 0);
   245	    vertex(s/2, h/2, d/2, 0, 0);vertex(s/2, -h/2, d/2, 0, 1);vertex(-s/2, -h/2, d/2, 1, 1);vertex(-s/2, h/2, d/2, 1, 0);
   246	    vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(-s/2, -h/2, -d/2, 1, 1);vertex(-s/2, h/2, -d/2, 1, 0);
   247	    vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, h/2, -d/2, 0, 1);vertex(s/2, h/2, -d/2, 1, 1);vertex(s/2, h/2, d/2, 1, 0);
   248	    vertex(-s/2, -h/2, -d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, -h/2, -d/2, 1, 0);
   249	    endShape();
   250	}
   251	
   252	//葉全体の描画
   253	void leaves(){
   254	    fill(255);
   255	    pushMatrix();
   256	    translate(0, .5, 0);
   257	    scale(.6, .6, .6);
   258	    pyramid(1);
   259	    popMatrix();
   260	    pushMatrix();
   261	    translate(0, .25, 0);
   262	    scale(.8, .8, .8);
   263	    pyramid(1);
   264	    popMatrix();
   265	    pushMatrix();
   266	    pyramid(1);
   267	    popMatrix();
   268	}
   269	
   270	//幹の描画
   271	void trunk(){
   272	    fill(255);
   273	    pushMatrix();
   274	    scale(.2, .4, .2);
   275	    translate(0, .5, 0);
   276	    drawBox(1, 1, 1, 1);
   277	    popMatrix();
   278	}
   279	
   280	//木の描画
   281	void drawTree(float s, float x, float z){
   282	    noStroke();
   283	    pushMatrix();
   284	    scale(s, s, s);
   285	    translate(x, 0, z);
   286	    trunk();
   287	    pushMatrix();
   288	    translate(0, .4, 0);
   289	    leaves();
   290	    popMatrix();
   291	    popMatrix();
   292	}
   293	
   294	//家の描画
   295	void drawHouse(float s, float x, float z){
   296	    fill(255);
   297	    //土台
   298	    pushMatrix();
   299	    scale(s);
   300	    translate(x, 0.3, z);
   301	    drawBox(0.6, 0.6, 0.6, 2);
   302	    popMatrix();
   303	    //屋根
   304	    pushMatrix();
   305	    scale(s);
   306	    translate(x, 0.6, z);
   307	    pyramid(2);
   308	    popMatrix();
   309	}
   310	
   311	//観覧車の描画
   312	void drawFerrisWheel(float s, float x, float z){
   313	    scale(s);
   314	    pushMatrix();
   315	    if(night) emissive(255, 255, 255);
   316	    translate(x, 0, z);
   317	    // 脚
   318	    stroke(126, 15, 9);
   319	    strokeWeight(5);
   320	    line(x - depth, 0, z + depth, x, 80, z + depth);
   321	    line(x + depth, 0, z + depth, x, 80, z + depth);
   322	    line(x - depth, 0, z - depth, x, 80, z - depth);
   323	    line(x + depth, 0, z - depth, x, 80, z - depth);
   324	    strokeWeight(1);
   325	    noStroke();
   326	    popMatrix();
   327	    //支柱
   328	    pushMatrix();
   329	    stroke(126, 15, 9);
   330	    strokeWeight(5);
   331	    translate(x, 80, z);
   332	    for(int i=0; i<24; i++){
   333	        line(x, 0, z + depth, x + gondolaSize*cos(radians(rad3 + 15*i)), gondolaSize*sin(radians(rad3 + 15*i)), z + depth);
   334	        line(x, 0, z - depth, x + gondolaSize*cos(radians(rad3 + 15*i)), gondolaSize*sin(radians(rad3 + 15*i)), z - depth);
   335	        //客室
   336	        pushMatrix();
   337	        stroke(colorPallet[i%12]);
   338	        translate(x + gondolaSize*cos(radians(rad3 + 15*i)), gondolaSize*sin(radians(rad3 + 15*i)), z);
   339	        pillar(15, 5, 5);
   340	        stroke(126, 15, 9);
   341	        popMatrix();
   342	    }
   343	    strokeWeight(1);
   344	    noStroke();
   345	    popMatrix();
   346	    //間の円
   347	    pushMatrix();
   348	    stroke(126, 15, 9);
   349	    strokeWeight(3);
   350	    translate(x, 80, z);
   351	    for(float j = 0; j < 360; j++) {
   352	        line(x + r1 * cos(j), r1 * sin(j), z + depth, x + r1*cos(j + 1), r1 * sin(j+1),  z + depth);
   353	        line(x + r1 * cos(j), r1 * sin(j), z - depth, x + r1*cos(j + 1), r1 * sin(j+1),  z - depth);
   354	        line(x + r2 * cos(j), r2 * sin(j), z + depth, x + r2*cos(j + 1), r2 * sin(j+1),  z + depth);
   355	        line(x + r2 * cos(j), r2 * sin(j), z - depth, x + r2*cos(j + 1), r2 * sin(j+1),  z - depth);
   356	    }
   357	    strokeWeight(1);
   358	    noStroke();
   359	    popMatrix();
   360	    emissive(0);
   361	}
   362	
   363	//箱を描画
   364	void signBoard(float s, float h, float d, int p){
   365	    beginShape(QUADS);
   366	    //各面(計6面)で描画
   367	    vertex(s/2, h/2, -d/2, 0, 0);vertex(s/2, -h/2, -d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, h/2, d/2, 1, 0);
   368	    vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(-s/2, -h/2, -d/2, 1, 1);vertex(-s/2, h/2, -d/2, 1, 0);
   369	    endShape();
   370	    beginShape(QUADS);
   371	    texture(imgLogo);
   372	    textureMode(NORMAL);
   373	    vertex(-s/2, h/2, -d/2, 0, 0);vertex(-s/2, -h/2, -d/2, 0, 1);vertex(s/2, -h/2, -d/2, 1, 1);vertex(s/2, h/2, -d/2, 1, 0);
   374	    vertex(s/2, h/2, d/2, 0, 0);vertex(s/2, -h/2, d/2, 0, 1);vertex(-s/2, -h/2, d/2, 1, 1);vertex(-s/2, h/2, d/2, 1, 0);
   375	    endShape();
   376	    beginShape(QUADS);
   377	    vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, h/2, -d/2, 0, 1);vertex(s/2, h/2, -d/2, 1, 1);vertex(s/2, h/2, d/2, 1, 0);
   378	    vertex(-s/2, -h/2, -d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, -h/2, -d/2, 1, 0);
   379	    endShape();
   380	}
   381	
   382	//コンビニの描画
   383	void drawConv(float s, float x, float z){
   384	    fill(200);
   385	    //土台
   386	    pushMatrix();
   387	    scale(s);
   388	    translate(x, .025, z);
   389	    //床
   390	    pushMatrix();
   391	    translate(0, 0, .1);
   392	    drawBox(.8, .05, .8, 4);
   393	    popMatrix();
   394	    //主部
   395	    fill(128);
   396	    if(night) emissive(255, 245, 102);
   397	    translate(0, .225, 0);
   398	    drawBox(.7, .4, .5, 4);
   399	    translate(0, .3, 0);
   400	    //帯
   401	    fill(200);
   402	    if(night) emissive(100, 100, 100);
   403	    drawBox(.9, .2, .7, 4);
   404	    fill(0, 104, 196);
   405	    drawBox(.901, .1, .701, 4);
   406	    translate(0, -.07, 0);
   407	    fill(200, 0, 0);
   408	    drawBox(.901, .01, .701, 4);
   409	    popMatrix();
   410	    //ドアとか窓とか
   411	    //縦2等分線
   412	    fill(200);
   413	    emissive(0);
   414	    pushMatrix();
   415	    scale(s);
   416	    translate(x, .25, z + .26);
   417	    drawBox(.02, .4, .02, 4);
   418	    popMatrix();
   419	    //縦4等分線
   420	    pushMatrix();
   421	    scale(s);
   422	    translate(x + .175, .25, z + .26);
   423	    drawBox(.02, .4, .02, 4);
   424	    popMatrix();
   425	    //横2等分線
   426	    //正面
   427	    pushMatrix();
   428	    scale(s);
   429	    translate(x + .2625, .25, z + .26);
   430	    drawBox(.175, .02, .02, 4);
   431	    popMatrix();
   432	    //側面
   433	    pushMatrix();
   434	    scale(s);
   435	    translate(x + .352, .25, z);
   436	    drawBox(.02, .02, .5, 4);
   437	    popMatrix();
   438	    pushMatrix();
   439	    scale(s);
   440	    translate(x - .352, .25, z);
   441	    drawBox(.02, .02, .5, 4);
   442	    popMatrix();
   443	    pushMatrix();
   444	    scale(s);
   445	    translate(x, .25, z - .252);
   446	    drawBox(.7, .02, .02, 4);
   447	    popMatrix();
   448	    //入口の帯
   449	    pushMatrix();
   450	    scale(s);
   451	    translate(x + .0875, .4, z + .26);
   452	    drawBox(.175, .1, .02, 4);
   453	    popMatrix();
   454	    //柱
   455	    pushMatrix();
   456	    scale(s);
   457	    pushMatrix();
   458	    translate(x + .35, .25, z + .25);
   459	    drawBox(.0875, .5, .0875, 4);
   460	    popMatrix();
   461	    pushMatrix();
   462	    translate(x - .35, .25, z + .25);
   463	    drawBox(.0875, .5, .0875, 4);
   464	    popMatrix();
   465	    pushMatrix();
   466	    translate(x + .35, .25, z - .25);
   467	    drawBox(.0875, .5, .0875, 4);
   468	    popMatrix();
   469	    pushMatrix();
   470	    translate(x - .35, .25, z - .25);
   471	    drawBox(.0875, .5, .0875, 4);
   472	    popMatrix();
   473	    popMatrix();
   474	    //ゴミ箱
   475	    pushMatrix();
   476	    scale(s);
   477	    translate(x - .25, .135, z + .29);
   478	    drawBox(.08, .2, .08, 4);
   479	    popMatrix();
   480	    pushMatrix();
   481	    scale(s);
   482	    translate(x - .15, .135, z + .29);
   483	    drawBox(.08, .2, .08, 4);
   484	    popMatrix();
   485	    pushMatrix();
   486	    scale(s);
   487	    translate(x - .05, .135, z + .29);
   488	    drawBox(.08, .2, .08, 4);
   489	    popMatrix();
   490	    //看板
   491	    pushMatrix();
   492	    scale(s);
   493	    translate(x + .6, .4, z + .5);
   494	    rotateX(PI/2);
   495	    pillar(.8, .03, .03);
   496	    popMatrix();
   497	    pushMatrix();
   498	    if(night) emissive(100, 100, 100);
   499	    scale(s);
   500	    translate(x + .6, .95, z + .5);
   501	    signBoard(.3, .3, .1, 5);
   502	    popMatrix();
   503	}
   504	
   505	//駅
   506	void drawStation(float s, float x, float z){
   507	    fill(200);
   508	    //土台
   509	    pushMatrix();
   510	    emissive(0);
   511	    scale(s);
   512	    translate(x, .05, z);
   513	    //床
   514	    drawBox(.8, .1, .5, 4);
   515	    popMatrix();
   516	    //壁
   517	    pushMatrix();
   518	    scale(s);
   519	    translate(x, .2, z - .15);
   520	    drawBox(.8, .2, .05, 4);
   521	    popMatrix();
   522	    //屋根
   523	    pushMatrix();
   524	    if(night) emissive(200, 200, 200);
   525	    scale(s);
   526	    translate(x, .3, z - .15);
   527	    rotateX(radians(-15));
   528	    translate(0, 0, .20);
   529	    drawBox(.9, .05, .5, 4);
   530	    popMatrix();
   531	    //柱
   532	    pushMatrix();
   533	    emissive(0);
   534	    scale(s);
   535	    translate(x + .775/2 - .1, .25, z + .15);
   536	    rotateX(PI/2);
   537	    pillar(.3, .025, .025);
   538	    popMatrix();
   539	    pushMatrix();
   540	    scale(s);
   541	    translate(x + .775/4 - .1, .25, z + .15);
   542	    rotateX(PI/2);
   543	    pillar(.3, .025, .025);
   544	    popMatrix();
   545	    pushMatrix();
   546	    scale(s);
   547	    translate(x - .775/2 + .1, .25, z + .15);
   548	    rotateX(PI/2);
   549	    pillar(.3, .025, .025);
   550	    popMatrix();
   551	    pushMatrix();
   552	    scale(s);
   553	    translate(x - .775/4 + .1, .25, z + .15);
   554	    rotateX(PI/2);
   555	    pillar(.3, .025, .025);
   556	    popMatrix();
   557	}
   558	
   559	//傘
   560	void umbrella(float r){
   561	    pushMatrix();
   562	    translate(0, .3, 0);
   563	    beginShape(QUADS);
   564	    //正八角錐(計8面)
   565	    for(int i = 0; i < 8; i++){
   566	        if(i%2==0) fill(230, 0, 0);
   567	        else fill(230);
   568	        vertex(0, 0, 0);vertex(-r*cos(radians(30))*cos(radians((360*i)/8)), -r*sin(radians(30)), r*cos(radians(30))*sin(radians(360*i/8)));
   569	        vertex(-r*cos(radians(30))*cos(radians((360*i)/8)), -r*sin(radians(30)), r*cos(radians(30))*sin(radians(360*i/8)));vertex(-r*cos(radians(30))*cos(radians(360*(i+1)/8)), -r*sin(radians(30)), r*cos(radians(30))*sin(radians(360*(i+1)/8)));
   570	        vertex(-r*cos(radians(30))*cos(radians(360*(i+1)/8)), -r*sin(radians(30)), r*cos(radians(30))*sin(radians(360*(i+1)/8)));vertex(0, 0, 0);
   571	    }
   572	    endShape();
   573	    popMatrix();
   574	}
   575	
   576	//机
   577	void desk() {
   578	    fill(200);
   579	    //台座
   580	    pushMatrix();
   581	    translate(0, .01, 0);
   582	    rotateX(PI/2);
   583	    pillar(.02, .1, .1);
   584	    popMatrix();
   585	    //支柱
   586	    pushMatrix();
   587	    translate(0, .01 + .4, 0);
   588	    rotateX(PI/2);
   589	    pillar(.8, .02, .02);
   590	    popMatrix();
   591	    //机
   592	    pushMatrix();
   593	    translate(0, .01 + .25, 0);
   594	    drawBox(.4, .03, .4, 4);
   595	    popMatrix();
   596	    //ジュース
   597	    pushMatrix();
   598	    if(night) emissive(163, 188, 226);
   599	    fill(163, 188, 226);
   600	    translate(-.08, .01 + .25 + .015 + .05, .1);
   601	    rotateX(PI/2);
   602	    pillar(.1, .05, .04);
   603	    popMatrix();
   604	    pushMatrix();
   605	    fill(163, 188, 226);
   606	    translate(.08, .01 + .25 + .015 + .05, -.1);
   607	    rotateX(PI/2);
   608	    pillar(.1, .05, .04);
   609	    popMatrix();
   610	    emissive(0);
   611	}
   612	
   613	//イス
   614	void chair() {
   615	    fill(200);
   616	    //4足
   617	    pushMatrix();
   618	    scale(2);
   619	    translate(.05, .05, -.05);
   620	    drawBox(.02, .1, .02, 4);
   621	    popMatrix();
   622	    pushMatrix();
   623	    scale(2);
   624	    translate(-.05, .05, -.05);
   625	    drawBox(.02, .1, .02, 4);
   626	    popMatrix();
   627	    pushMatrix();
   628	    scale(2);
   629	    translate(.05, .05, .05);
   630	    drawBox(.02, .1, .02, 4);
   631	    popMatrix();
   632	    pushMatrix();
   633	    scale(2);
   634	    translate(-.05, .05, .05);
   635	    drawBox(.02, .1, .02, 4);
   636	    popMatrix();
   637	    //背もたれ
   638	    pushMatrix();
   639	    scale(2);
   640	    translate(0, .1 + .01, 0);
   641	    drawBox(.12, .02, .12, 4);
   642	    popMatrix();
   643	    pushMatrix();
   644	    scale(2);
   645	    //scale(-1, 1, 1);
   646	    translate(-.06 + .01, .1 + .06, 0);
   647	    drawBox(.02, .11, .11, 4);
   648	    popMatrix(); 
   649	}
   650	
   651	//テラスの描画
   652	void drawTerrace(float s, float x, float z) {
   653	    //机
   654	    pushMatrix();
   655	    scale(s);
   656	    translate(x, 0, z);
   657	    desk();
   658	    popMatrix();
   659	    //傘
   660	    pushMatrix();
   661	    scale(s);
   662	    translate(x, .57, z);
   663	    umbrella(.5);
   664	    popMatrix();
   665	    //イス
   666	    pushMatrix();
   667	    scale(s);
   668	    translate(x + .4, 0, z);
   669	    scale(-1, 1, 1);
   670	    chair();
   671	    popMatrix();
   672	    pushMatrix();
   673	    scale(s);
   674	    translate(x - .4, 0, z);
   675	    chair();
   676	    popMatrix();
   677	}
   678	
   679	//大きい家の屋根
   680	void largeRoof(float x, float z, float c, float d, float h){
   681	    fill(170);
   682	    pushMatrix();
   683	    beginShape(QUADS);
   684	    vertex(-d/2, 0, -c/2);vertex(-d/2, 0, c/2);vertex(d/2, 0, c/2);vertex(d/2, 0, -c/2);
   685	    //側面1
   686	    vertex(-d/2, 0, c/2);vertex(-d-d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));
   687	    vertex(-d-d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));vertex(d + d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));
   688	    vertex(d + d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));vertex(d/2, 0, c/2);
   689	    vertex(d/2, 0, c/2);vertex(-d/2, 0, c/2);
   690	    //側面2
   691	    vertex(d/2, 0, c/2);vertex(d + d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));
   692	    vertex(d + d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));vertex(d+d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));
   693	    vertex(d+d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));vertex(d/2, 0, -c/2);
   694	    vertex(d/2, 0, -c/2);vertex(d/2, 0, c/2);
   695	    //側面3
   696	    vertex(d/2, 0, -c/2);vertex(d+d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));
   697	    vertex(d+d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));vertex(-d - d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));
   698	    vertex(-d - d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));vertex(-d/2, 0, -c/2);
   699	    vertex(-d/2, 0, -c/2);vertex(d/2, 0, -c/2);
   700	    //側面4
   701	    vertex(-d/2, 0, -c/2);vertex(-d - d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));
   702	    vertex(-d - d/2, -h*sin(radians(40)), -c/2 - h*cos(radians(40)));vertex(-d-d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));
   703	    vertex(-d-d/2, -h*sin(radians(40)), c/2 + h*cos(radians(40)));vertex(-d/2, 0, c/2);
   704	    vertex(-d/2, 0, c/2);vertex(-d/2, 0, -c/2);
   705	    endShape();
   706	    popMatrix();
   707	    //屋根部屋1
   708	    pushMatrix();
   709	    translate(0, -.05, 0);
   710	    drawBox(.25, .02, .7, 4);
   711	    popMatrix();
   712	    pushMatrix();
   713	    translate(.15, -.08, 0);
   714	    rotateZ(radians(-40));
   715	    drawBox(.1, .02, .7, 4);
   716	    popMatrix();
   717	    pushMatrix();
   718	    translate(-.15, -.08, 0);
   719	    rotateZ(radians(40));
   720	    drawBox(.1, .02, .7, 4);
   721	    popMatrix();
   722	    //部屋1
   723	    fill(200);
   724	    pushMatrix();
   725	    translate(0, -.09, 0);
   726	    drawBox(.25, .09, .65, 4);
   727	    fill(128);
   728	    if(night) emissive(255, 245, 102);
   729	    drawBox(.18, .04, .656, 4);
   730	    popMatrix();
   731	    //屋根部屋2
   732	    fill(170);
   733	    pushMatrix();
   734	    emissive(0);
   735	    translate(0, -.08, -.06);
   736	    rotateX(radians(-30));
   737	    drawBox(.7, .02, .14, 4);
   738	    popMatrix();
   739	    pushMatrix();
   740	    translate(0, -.08, .06);
   741	    rotateX(radians(30));
   742	    drawBox(.7, .02, .14, 4);
   743	    popMatrix();
   744	    //部屋2
   745	    fill(200);
   746	    pushMatrix();
   747	    translate(0, -.12, 0);
   748	    drawBox(.65, .11, .11, 4);
   749	    fill(128);
   750	    if(night) emissive(255, 245, 102);
   751	    drawBox(.656, .06, .06, 4);
   752	    popMatrix();
   753	    //蓋
   754	    fill(170);
   755	    pushMatrix();
   756	    emissive(0);
   757	    translate(0, -h*sin(radians(40)) - .01, 0);
   758	    drawBox(3*d + .02, .02, 3*d + .02, 4);
   759	    popMatrix();
   760	}
   761	
   762	//立派な家
   763	void drawLargeHouse(float s, float x, float z){
   764	    float d = .3;
   765	    //屋根
   766	    pushMatrix();
   767	    scale(s);
   768	    translate(x, .78, z);
   769	    largeRoof(x, z, .2, d, .4);
   770	    popMatrix();
   771	    //土台
   772	    //床
   773	    pushMatrix();
   774	    fill(200);
   775	    scale(s);
   776	    translate(x, .03, z);
   777	    drawBox(3*d + .02, .06, 3*d + .02, 4);
   778	    popMatrix();
   779	    //腹
   780	    pushMatrix();
   781	    if(night) emissive(255, 245, 102);
   782	    fill(128);
   783	    scale(s);
   784	    translate(x, .03 + .2, z);
   785	    drawBox(2.5*d, .4, 2.5*d, 4);
   786	    popMatrix();
   787	    //天井
   788	    pushMatrix();
   789	    emissive(0);
   790	    fill(150);
   791	    scale(s);
   792	    translate(x, .03 + .4 + .04, z);
   793	    drawBox(3*d + .05, .08, 3*d + .05, 4);
   794	    popMatrix();
   795	    //柱
   796	    pushMatrix();
   797	    fill(200);
   798	    scale(s);
   799	    translate(x + 1.25*d, .03 + .2, z + 1.25*d);
   800	    drawBox(.3*d, .4, .3*d, 4);
   801	    popMatrix(); 
   802	    pushMatrix();
   803	    fill(200);
   804	    scale(s);
   805	    translate(x - 1.25*d, .03 + .2, z - 1.25*d);
   806	    drawBox(.3*d, .4, .3*d, 4);
   807	    popMatrix(); 
   808	    pushMatrix();
   809	    fill(200);
   810	    scale(s);
   811	    translate(x + 1.25*d, .03 + .2, z - 1.25*d);
   812	    drawBox(.3*d, .4, .3*d, 4);
   813	    popMatrix();
   814	    pushMatrix();
   815	    fill(200);
   816	    scale(s);
   817	    translate(x - 1.25*d, .03 + .2, z + 1.25*d);
   818	    drawBox(.3*d, .4, .3*d, 4);
   819	    popMatrix();
   820	    //側面
   821	    pushMatrix();
   822	    fill(200);
   823	    scale(s);
   824	    translate(x + 1.25*d, .03 + .2, z);
   825	    drawBox(.02, .03, 2.8*d, 4);
   826	    popMatrix();
   827	    pushMatrix();
   828	    fill(200);
   829	    scale(s);
   830	    translate(x + 1.25*d + .04, .03 + .2, z);
   831	    drawBox(.05, .4, .1, 4);
   832	    popMatrix();
   833	    pushMatrix();
   834	    fill(200);
   835	    scale(s);
   836	    translate(x - 1.25*d, .03 + .2 - .1, z);
   837	    drawBox(.02, .2, 2.8*d, 4);
   838	    popMatrix();
   839	    pushMatrix();
   840	    fill(200);
   841	    scale(s);
   842	    translate(x - 1.25*d - .04, .03 + .2, z);
   843	    drawBox(.05, .4, .1, 4);
   844	    popMatrix();
   845	    pushMatrix();
   846	    fill(200);
   847	    scale(s);
   848	    translate(x, .03 + .1, z - 1.25*d);
   849	    drawBox(2.8*d, .2, .02, 4);
   850	    popMatrix();
   851	    //ガレージ
   852	    pushMatrix();
   853	    fill(200);
   854	    scale(s);
   855	    translate(x - 3*d/7, .03 + .1, z + 1.25*d);
   856	    drawBox(4*d/3, .2, .02, 4);
   857	    popMatrix();
   858	    //ドア
   859	    pushMatrix();
   860	    fill(200);
   861	    scale(s);
   862	    translate(x + 3*d/10, 0.25, z + 1.25*d);
   863	    drawBox(.04, .38, .1, 4);
   864	    popMatrix();
   865	    pushMatrix();
   866	    fill(200);
   867	    scale(s);
   868	    translate(x + 1.01*d, 0.25, z + 1.25*d);
   869	    drawBox(.04, .38, .1, 4);
   870	    popMatrix();
   871	    pushMatrix();
   872	    fill(200);
   873	    scale(s);
   874	    translate(x + .8*d, .25, z + 1.25*d);
   875	    drawBox(.02, .38, .02, 4);
   876	    popMatrix();
   877	    //玄関
   878	    pushMatrix();
   879	    fill(200);
   880	    scale(s);
   881	    translate(x + .65*d, .015, z + 1.7*d);
   882	    drawBox(.2, .03, .1, 4);
   883	    popMatrix(); 
   884	}
   885	
   886	//六角柱の描画
   887	void drawHexagonalPrism(float a, float h) {
   888	    pushMatrix();
   889	    beginShape(QUADS);
   890	    //三角柱を6回繰り返すイメージ
   891	    for(int i=0; i<6; i++){
   892	        //上面
   893	        vertex(0, h/2, 0);vertex(a*cos(radians(60*i)), h/2, a*sin(radians(60*i)));
   894	        vertex(a*cos(radians(60*i)), h/2, a*sin(radians(60*i)));vertex(a*cos(radians(60*(i + 1))), h/2, a*sin(radians(60*(i + 1))));
   895	        vertex(a*cos(radians(60*(i + 1))), h/2, a*sin(radians(60*(i + 1))));vertex(0, h/2, 0);
   896	        //側面
   897	        vertex(a*cos(radians(60*i)), h/2, a*sin(radians(60*i)));vertex(a*cos(radians(60*i)), -h/2, a*sin(radians(60*i)));
   898	        vertex(a*cos(radians(60*i)), -h/2, a*sin(radians(60*i)));vertex(a*cos(radians(60*(i + 1))), -h/2, a*sin(radians(60*(i + 1))));
   899	        vertex(a*cos(radians(60*(i + 1))), -h/2, a*sin(radians(60*(i + 1))));vertex(a*cos(radians(60*(i + 1))), h/2, a*sin(radians(60*(i + 1))));
   900	        vertex(a*cos(radians(60*(i + 1))), h/2, a*sin(radians(60*(i + 1))));vertex(a*cos(radians(60*i)), h/2, a*sin(radians(60*i)));
   901	        //底面
   902	        vertex(0, -h/2, 0);vertex(a*cos(radians(60*i)), -h/2, a*sin(radians(60*i)));
   903	        vertex(a*cos(radians(60*i)), -h/2, a*sin(radians(60*i)));vertex(a*cos(radians(60*(i + 1))), -h/2, a*sin(radians(60*(i + 1))));
   904	        vertex(a*cos(radians(60*(i + 1))), -h/2, a*sin(radians(60*(i + 1))));vertex(0, -h/2, 0);
   905	    }
   906	    endShape();
   907	    popMatrix();
   908	}
   909	
   910	//管制塔
   911	void drawLightHouse(float s, float x, float z) {
   912	    //土台
   913	    pushMatrix();
   914	    fill(200);
   915	    scale(s);
   916	    translate(x, .03, z);
   917	    drawBox(1, .06, .5, 4);
   918	    popMatrix();
   919	    pushMatrix();
   920	    fill(128);
   921	    if(night) emissive(255, 245, 102);
   922	    scale(s);
   923	    translate(x, .06 + .125, z);
   924	    drawBox(.8, .25, .4, 4);
   925	    popMatrix();
   926	    pushMatrix();
   927	    fill(200);
   928	    emissive(0);
   929	    scale(s);
   930	    translate(x, .06 + .25 + .03, z);
   931	    drawBox(1, .06, .5, 4);
   932	    popMatrix();
   933	    //窓とか
   934	    pushMatrix();
   935	    fill(200);
   936	    scale(s);
   937	    translate(x + .4 - .02 + .16, .06 + .125, z);
   938	    for(int i=0; i<6; i++){
   939	        translate(-.16, 0, 0);
   940	        drawBox(.06, .25, .5, 4);
   941	    }
   942	    popMatrix();
   943	    pushMatrix();
   944	    fill(200);
   945	    scale(s);
   946	    translate(x, .06 + .125, z);
   947	    drawBox(.8, .04, .5, 4);
   948	    popMatrix();
   949	    //柱
   950	    pushMatrix();
   951	    scale(s);
   952	    translate(x - .25, .06 + .25 + .06 + .01, z);
   953	    drawBox(.35, .02, .35, 4);
   954	    popMatrix();
   955	    pushMatrix();
   956	    scale(s);
   957	    translate(x - .25, .06 + .25 + .06 + .02 + .125, z);
   958	    drawHexagonalPrism(.1, .25);
   959	    popMatrix();
   960	    //主部
   961	    pushMatrix();
   962	    scale(s);
   963	    translate(x - .25, .06 + .25 + .06 + .02 + .25 + .07, z);
   964	    drawHexagonalPrism(.17, .14);
   965	    popMatrix();
   966	    pushMatrix();
   967	    fill(128);
   968	    if(night) emissive(255, 245, 102);
   969	    scale(s);
   970	    translate(x - .25, .06 + .25 + .06 + .02 + .25 + .14 + .03, z);
   971	    drawHexagonalPrism(.15, .06);
   972	    popMatrix();
   973	    pushMatrix();
   974	    emissive(0);
   975	    fill(200);
   976	    scale(s);
   977	    translate(x - .25, .06 + .25 + .06 + .02 + .25 + .14 + .06 + .03, z);
   978	    drawHexagonalPrism(.2, .06);
   979	    popMatrix();
   980	    pushMatrix();
   981	    fill(200);
   982	    scale(s);
   983	    translate(x - .25, .06 + .25 + .06 + .02 + .25 + .14 + .06 + .06 + .02, z);
   984	    drawHexagonalPrism(.1, .04);
   985	    popMatrix();
   986	    //上のアンテナ
   987	    pushMatrix();
   988	    fill(128);
   989	    scale(s);
   990	    translate(x - .25, .06 + .25 + .06 + .02 + .25 + .14 + .06 + .06 + .04 + .04, z);
   991	    drawBox(.01, .08, .01, 4);
   992	    popMatrix();
   993	    for(int i=0; i<8; i++){
   994	        pushMatrix();
   995	        fill(128);
   996	        scale(s);
   997	        translate(x - .25 + .06*cos(PI*i/4), .06 + .25 + .06 + .02 + .25 + .14 + .06 + .06 + .04 + .03, z + .06*sin(PI*i/4));
   998	        drawBox(.01, .06, .01, 4);
   999	        popMatrix();  
  1000	    }
  1001	}
  1002	
  1003	//パンタグラフ
  1004	void pantograph() {
  1005	    float length = .44721359549995794;
  1006	    fill(128);
  1007	    //ひし形(手前)
  1008	    pushMatrix();
  1009	    scale(.5);
  1010	    translate(0, 0, .1);
  1011	    //ひし形
  1012	    pushMatrix();
  1013	    translate(-.2, -.1, 0);
  1014	    rotateZ(-PI/6);
  1015	    drawBox(length, .03, .03, 4);
  1016	    popMatrix();
  1017	    pushMatrix();
  1018	    translate(-.2, .1, 0);
  1019	    rotateZ(PI/6);
  1020	    drawBox(length, .03, .03, 4);
  1021	    popMatrix();
  1022	    pushMatrix();
  1023	    translate(.2, -.1, 0);
  1024	    rotateZ(PI/6);
  1025	    drawBox(length, .03, .03, 4);
  1026	    popMatrix();
  1027	    pushMatrix();
  1028	    translate(.2, .1, 0);
  1029	    rotateZ(-PI/6);
  1030	    drawBox(length, .03, .03, 4);
  1031	    popMatrix();
  1032	    popMatrix();
  1033	    //ひし形(奥)
  1034	    pushMatrix();
  1035	    scale(.5);
  1036	    translate(0, 0, -.1);
  1037	    //ひし形
  1038	    pushMatrix();
  1039	    translate(-.2, -.1, 0);
  1040	    rotateZ(-PI/6);
  1041	    drawBox(length, .03, .03, 4);
  1042	    popMatrix();
  1043	    pushMatrix();
  1044	    translate(-.2, .1, 0);
  1045	    rotateZ(PI/6);
  1046	    drawBox(length, .03, .03, 4);
  1047	    popMatrix();
  1048	    pushMatrix();
  1049	    translate(.2, -.1, 0);
  1050	    rotateZ(PI/6);
  1051	    drawBox(length, .03, .03, 4);
  1052	    popMatrix();
  1053	    pushMatrix();
  1054	    translate(.2, .1, 0);
  1055	    rotateZ(-PI/6);
  1056	    drawBox(length, .03, .03, 4);
  1057	    popMatrix();
  1058	    popMatrix();
  1059	    //つなぎ
  1060	    pushMatrix();
  1061	    scale(.5);
  1062	    pushMatrix();
  1063	    translate(-.4, 0, 0);
  1064	    drawBox(.03, .03, .2, 4);
  1065	    popMatrix();
  1066	    pushMatrix();
  1067	    translate(.4, 0, 0);
  1068	    drawBox(.03, .03, .2, 4);
  1069	    popMatrix();
  1070	    pushMatrix();
  1071	    translate(0, .2, 0);
  1072	    drawBox(.03, .03, .5, 4);
  1073	    popMatrix();
  1074	    popMatrix();
  1075	}
  1076	
  1077	//電車の車輪
  1078	void wheel(float x, float z){
  1079	    //後輪
  1080	    pushMatrix();
  1081	    translate(-.5, 0, .2);
  1082	    pillar(.02, .075, .075);
  1083	    popMatrix();
  1084	    pushMatrix();
  1085	    translate(-.3, 0, .2);
  1086	    pillar(.02, .075, .075);
  1087	    popMatrix();
  1088	    //後輪
  1089	    pushMatrix();
  1090	    translate(-.5, 0, -.2);
  1091	    pillar(.02, .075, .075);
  1092	    popMatrix();
  1093	    pushMatrix();
  1094	    translate(-.3, 0, -.2);
  1095	    pillar(.02, .075, .075);
  1096	    popMatrix();
  1097	    //前輪
  1098	    pushMatrix();
  1099	    translate(.5, 0, .2);
  1100	    pillar(.02, .075, .075);
  1101	    popMatrix();
  1102	    pushMatrix();
  1103	    translate(.3, 0, .2);
  1104	    pillar(.02, .075, .075);
  1105	    popMatrix();
  1106	    //前輪
  1107	    pushMatrix();
  1108	    translate(.5, 0, -.2);
  1109	    pillar(.02, .075, .075);
  1110	    popMatrix();
  1111	    pushMatrix();
  1112	    translate(.3, 0, -.2);
  1113	    pillar(.02, .075, .075);
  1114	    popMatrix();
  1115	}
  1116	
  1117	//電車専用box(texture)
  1118	void drawTrainBox(float s, float h, float d, boolean flont){
  1119	    if(flont){
  1120	        //正面
  1121	        beginShape(QUADS);
  1122	        texture(imgTrainFront);
  1123	        textureMode(NORMAL);
  1124	        vertex(s/2, h/2, -d/2, .2, .1);vertex(s/2, -h/2, -d/2, .2, 1);vertex(s/2, -h/2, d/2, .8, 1);vertex(s/2, h/2, d/2, .8, .1);
  1125	        endShape();
  1126	
  1127	        //側面
  1128	        beginShape(QUADS);
  1129	        texture(imgTrainSide);
  1130	        textureMode(NORMAL);
  1131	        vertex(-s/2, h/2, -d/2, .05, .1);vertex(-s/2, -h/2, -d/2, .05, .9);vertex(s/2, -h/2, -d/2, .9, .9);vertex(s/2, h/2, -d/2, .9, .1);
  1132	        vertex(s/2, h/2, d/2, .05, .1);vertex(s/2, -h/2, d/2, .05, .9);vertex(-s/2, -h/2, d/2, .9, .9);vertex(-s/2, h/2, d/2, .9, .1);
  1133	        endShape();
  1134	
  1135	        //上面
  1136	        beginShape(QUADS);
  1137	        fill(200);
  1138	        vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, h/2, -d/2, 0, 1);vertex(s/2, h/2, -d/2, 1, 1);vertex(s/2, h/2, d/2, 1, 0);
  1139	        vertex(-s/2, -h/2, -d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, -h/2, -d/2, 1, 0);
  1140	        endShape();
  1141	
  1142	        //背面
  1143	        beginShape(QUADS);
  1144	        fill(200);
  1145	        vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(-s/2, -h/2, -d/2, 1, 1);vertex(-s/2, h/2, -d/2, 1, 0);
  1146	        endShape();
  1147	    } else {
  1148	        //背面
  1149	        beginShape(QUADS);
  1150	        fill(200);
  1151	        vertex(s/2, h/2, -d/2, 0, 0);vertex(s/2, -h/2, -d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, h/2, d/2, 1, .1);
  1152	        endShape();
  1153	
  1154	        //側面
  1155	        beginShape(QUADS);
  1156	        texture(imgTrainSide);
  1157	        textureMode(NORMAL);
  1158	        vertex(-s/2, h/2, -d/2, .05, .1);vertex(-s/2, -h/2, -d/2, .05, .9);vertex(s/2, -h/2, -d/2, .9, .9);vertex(s/2, h/2, -d/2, .9, .1);
  1159	        vertex(s/2, h/2, d/2, .05, .1);vertex(s/2, -h/2, d/2, .05, .9);vertex(-s/2, -h/2, d/2, .9, .9);vertex(-s/2, h/2, d/2, .9, .1);
  1160	        endShape();
  1161	
  1162	        //上面
  1163	        beginShape(QUADS);
  1164	        fill(200);
  1165	        vertex(-s/2, h/2, d/2, 0, 0);vertex(-s/2, h/2, -d/2, 0, 1);vertex(s/2, h/2, -d/2, 1, 1);vertex(s/2, h/2, d/2, 1, 0);
  1166	        vertex(-s/2, -h/2, -d/2, 0, 0);vertex(-s/2, -h/2, d/2, 0, 1);vertex(s/2, -h/2, d/2, 1, 1);vertex(s/2, -h/2, -d/2, 1, 0);
  1167	        endShape();
  1168	
  1169	        //正面
  1170	        beginShape(QUADS);
  1171	        texture(imgTrainFront);
  1172	        textureMode(NORMAL);
  1173	        vertex(-s/2, h/2, d/2, .2, .1);vertex(-s/2, -h/2, d/2, .2, 1);vertex(-s/2, -h/2, -d/2, .8, 1);vertex(-s/2, h/2, -d/2, .8, .1);
  1174	        endShape();
  1175	    }
  1176	}
  1177	
  1178	//電車
  1179	void drawTrain(float s, float x, float z, float rot, boolean dir) {
  1180	    pushMatrix();
  1181	    if(night) emissive(100, 100, 100);
  1182	    fill(200);
  1183	    scale(s);
  1184	    translate(x, .35, z);
  1185	    rotateY(PI/2);
  1186	    rotateY(rot*PI/180);
  1187	    drawTrainBox(1.3, .55, .55, dir);
  1188	    popMatrix();
  1189	    //胴体上
  1190	    pushMatrix();
  1191	    scale(s);
  1192	    translate(x, .655, z);
  1193	    rotateY(PI/2);
  1194	    rotateY(rot*PI/180);
  1195	    translate(.25, 0, 0);
  1196	    drawBox(.3, .06, .4, 4);
  1197	    popMatrix();
  1198	    pushMatrix();
  1199	    scale(s);
  1200	    translate(x, .655, z);
  1201	    rotateY(PI/2);
  1202	    rotateY(rot*PI/180);
  1203	    translate(-.25, 0, 0);
  1204	    drawBox(.3, .06, .4, 4);
  1205	    popMatrix();
  1206	    //パンタグラフ
  1207	    pushMatrix();
  1208	    scale(s);
  1209	    translate(x, .655 + .03 + .1, z);
  1210	    rotateY(PI/2);
  1211	    rotateY(rot*PI/180);
  1212	    translate(.25, 0, 0);
  1213	    pantograph();
  1214	    popMatrix();
  1215	    pushMatrix();
  1216	    scale(s);
  1217	    translate(x, .655 + .03 + .1, z);
  1218	    rotateY(PI/2);
  1219	    rotateY(rot*PI/180);
  1220	    translate(-.25, 0, 0);
  1221	    pantograph();
  1222	    popMatrix();
  1223	    //車輪
  1224	    pushMatrix();
  1225	    fill(128);
  1226	    scale(s);
  1227	    translate(x, .075, z);
  1228	    rotateY(PI/2);
  1229	    rotateY(rot*PI/180);
  1230	    wheel(x, z);
  1231	    popMatrix();
  1232	    emissive(0);
  1233	}
  1234	
  1235	//線路と電線
  1236	void drawRailroad(float R1, float R2, float y){
  1237	    pushMatrix();
  1238	    strokeWeight(5);
  1239	    for(float j = 0; j < 360; j++) {
  1240	        //輪
  1241	        stroke(115, 66, 41);
  1242	        line(R1 * cos(j), y, R1 * sin(j), R1*cos(j + .1), y,  R1 * sin(j + .1));
  1243	        line(R2 * cos(j), y, R2 * sin(j), R2*cos(j + .1), y,  R2 * sin(j + .1));
  1244	        strokeWeight(7);
  1245	        //縦線
  1246	        line((R1-5) * cos(10*j), y, (R1-5) * sin(10*j), (R2+5)*cos(10*j), y,  (R2+5) * sin(10*j));
  1247	        //電線
  1248	        stroke(100);
  1249	        strokeWeight(3);
  1250	        line(((R1+R2)/2) * cos(j), y + 68, ((R1+R2)/2) * sin(j), ((R1+R2)/2)*cos(j + .1), y + 68,  ((R1+R2)/2) * sin(j + .1));
  1251	        strokeWeight(5);
  1252	    }
  1253	    strokeWeight(1);
  1254	    noStroke();
  1255	    popMatrix();
  1256	}
  1257	
  1258	//鉄道柵
  1259	void drawFence(float r){
  1260	    fill(200);
  1261	    for(int i = 0; 3*i<360; i++){
  1262	        pushMatrix();
  1263	        translate(r*cos(radians(3*i)), 15, r*sin(radians(3*i)));
  1264	        rotateY(radians(-3*i + 90));
  1265	        drawBox(5, 30, 5, 4);
  1266	        translate(0, 6, 0);
  1267	        drawBox(15, 6, 2, 4);
  1268	        translate(0, -16, 0);
  1269	        drawBox(15, 6, 2, 4);
  1270	        popMatrix();
  1271	    }
  1272	}
  1273	
  1274	//街頭
  1275	void drawLight(float r){
  1276	    for(int i = 0; 60*i<360; i++){
  1277	        pushMatrix();
  1278	        emissive(0);
  1279	        fill(128);
  1280	        translate(r*cos(radians(60*i)), 40, r*sin(radians(60*i)));
  1281	        rotateY(radians(-60*i));
  1282	        rotateX(PI/2);
  1283	        pillar(80, 3, 3);
  1284	        popMatrix();
  1285	        pushMatrix();
  1286	        translate(r*cos(radians(60*i)), 88, r*sin(radians(60*i)));
  1287	        if(night) emissive(242, 242, 176);
  1288	        fill(200, 200, 200);
  1289	        sphere(8);
  1290	        popMatrix();
  1291	    }
  1292	    emissive(0);
  1293	}
  1294	
  1295	void draw(){
  1296	    if(!night){
  1297	        //昼
  1298	        background(154, 217, 246);
  1299	        lights();
  1300	        pointLight(255, 255, 255, 300 * cos(-rad*PI/450), 30, 400 * sin(-rad*PI/450));
  1301	    }
  1302	    else {
  1303	        //夜
  1304	        background(0, 0, 48);
  1305	        pointLight(200, 200, 200, 300 * cos(-rad*PI/450), 80, 400 * sin(-rad*PI/450));
  1306	        spotLight(220, 220, 255, 0, 150, 0, 0, -1, 0, PI/2, 800);
  1307	    }
  1308	    float cameraX = map(mouseX, 0, width, 400, -200);
  1309	    float cameraY = map(mouseY, 0, height, 400, -200);
  1310	    float x1, z1, x2, z2, x3, z3, radius1 = 3, radius2 = 5.8;
  1311	    //camera(400 * cos(-rad*PI/450), cameraY, 400 * sin(-rad*PI/450), 0, 0, 0, 0, -1, 0);
  1312	    camera(cameraX, cameraY, 500, 0, 0, 0, 0, -1, 0);
  1313	    pushMatrix();
  1314	    //drawAxis('X', color(255, 0, 0, 60)); 
  1315	    //drawAxis('Y', color(0, 255, 0, 60));
  1316	    //drawAxis('Z', color(0, 0, 255, 60));
  1317	    x1 = radius1 * cos(radians(-rad));
  1318	    z1 = radius1 * sin(radians(-rad));
  1319	    x2 = radius2 * cos(radians(-rad4));
  1320	    z2 = radius2 * sin(radians(-rad4));
  1321	    x3 = radius1 * cos(radians(-rad2));
  1322	    z3 = radius1 * sin(radians(-rad2));
  1323	    pushMatrix();
  1324	    translate(0, -5, 0);
  1325	    rotateX(PI/2);
  1326	    //線路の砂利
  1327	    fill(239, 205, 154);
  1328	    pillar(1, 265, 265);
  1329	    //建物置く地面
  1330	    if(night) emissive(0, 53, 103);
  1331	    fill(93, 135, 183);
  1332	    pillar(10.3, 190, 190);
  1333	    popMatrix();
  1334	    emissive(0);
  1335	    /*オブジェクト*/
  1336	    //観覧車
  1337	    /*drawFerrisWheel(1.5, 0, 0);
  1338	    //コンビニ
  1339	    pushMatrix();
  1340	    rotateY(PI/5);
  1341	    drawConv(70, .12, 1.);
  1342	    popMatrix();
  1343	    //テラス
  1344	    pushMatrix();
  1345	    rotateY(-PI/8);
  1346	    drawTerrace(70, 0, 1.4);
  1347	    popMatrix();
  1348	    //駅
  1349	    pushMatrix();
  1350	    rotateY(-2*PI/5 + PI + PI/9);
  1351	    drawStation(90, 0, 1);
  1352	    popMatrix();
  1353	    //管制塔
  1354	    pushMatrix();
  1355	    rotateY(PI/6);
  1356	    drawLightHouse(70, .0, -1.4);
  1357	    popMatrix();
  1358	    //立派な家
  1359	    pushMatrix();
  1360	    rotateY(-PI/2);
  1361	    drawLargeHouse(65, .0, 1.3);
  1362	    popMatrix();
  1363	    //木々
  1364	    pushMatrix();
  1365	    drawTree(40, 2.6, .2);
  1366	    drawTree(40, .3, -2.6);
  1367	    popMatrix();
  1368	    //電車
  1369	    drawTrain(50, x1, z1, rad, false);
  1370	    drawTrain(50, x3, z3, rad2, true);
  1371	    popMatrix();
  1372	    //線路
  1373	    drawRailroad(215, 240, .0);
  1374	    //鉄道柵
  1375	    drawFence(260);
  1376	    //街頭
  1377	    drawLight(270);
  1378	    pushMatrix();
  1379	    //道路
  1380	    fill(118);
  1381	    translate(0, -9.55, 0);
  1382	    rotateX(PI/2);
  1383	    pillar(10, 330, 330);
  1384	    popMatrix();
  1385	    //車
  1386	    drawCar(52, x2, z2, 255, 254, 59, true);*/
  1387	    drawFerrisWheel(2.0, 0, 0);
  1388	    popMatrix();
  1389	    //電車(先頭)の速度
  1390	    rad++;
  1391	    //電車(後ろ)の速度
  1392	    rad2++;
  1393	    //観覧車の速度
  1394	    rad3 += speed;
  1395	    //車の速度
  1396	    rad4 += .5;
  1397	} 